Step 1: Create the Clear Data Service Functions
Create a new file: src/lib/firestore/clearDataService.ts
typescriptimport {
  collection,
  query,
  where,
  getDocs,
  deleteDoc,
  doc
} from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { COLLECTIONS } from './collections';

export interface ClearDataResult {
  success: boolean;
  clearedItems: {
    purchases: number;
    profile: boolean;
    chat: boolean;
    proMode: number;
    savingsGoal: boolean;
    localStorage: boolean;
  };
  errors: string[];
}

export const clearAllUserData = async (userId: string): Promise<ClearDataResult> => {
  const result: ClearDataResult = {
    success: false,
    clearedItems: {
      purchases: 0,
      profile: false,
      chat: false,
      proMode: 0,
      savingsGoal: false,
      localStorage: false
    },
    errors: []
  };

  try {
    // 1. Clear Purchase History
    try {
      const purchaseRef = collection(db!, COLLECTIONS.PURCHASE_HISTORY);
      const purchaseQuery = query(purchaseRef, where('userId', '==', userId));
      const purchaseSnapshot = await getDocs(purchaseQuery);
      
      for (const purchaseDoc of purchaseSnapshot.docs) {
        await deleteDoc(doc(db!, COLLECTIONS.PURCHASE_HISTORY, purchaseDoc.id));
        result.clearedItems.purchases++;
      }
    } catch (error) {
      result.errors.push(`Failed to clear purchase history: ${error.message}`);
    }

    // 2. Clear Financial Profile
    try {
      await deleteDoc(doc(db!, COLLECTIONS.FINANCIAL_PROFILES, userId));
      result.clearedItems.profile = true;
    } catch (error) {
      result.errors.push(`Failed to clear financial profile: ${error.message}`);
    }

    // 3. Clear Chat History
    try {
      await deleteDoc(doc(db!, COLLECTIONS.CHAT_HISTORY, userId));
      result.clearedItems.chat = true;
    } catch (error) {
      result.errors.push(`Failed to clear chat history: ${error.message}`);
    }

    // 4. Clear Pro Mode Analyses
    try {
      const proModeRef = collection(db!, COLLECTIONS.PRO_MODE_ANALYSES);
      const proModeQuery = query(proModeRef, where('userId', '==', userId));
      const proModeSnapshot = await getDocs(proModeQuery);
      
      for (const proModeDoc of proModeSnapshot.docs) {
        await deleteDoc(doc(db!, COLLECTIONS.PRO_MODE_ANALYSES, proModeDoc.id));
        result.clearedItems.proMode++;
      }
    } catch (error) {
      result.errors.push(`Failed to clear pro mode analyses: ${error.message}`);
    }

    // 5. Clear Savings Goal
    try {
      await deleteDoc(doc(db!, 'savingsGoals', userId));
      result.clearedItems.savingsGoal = true;
    } catch (error) {
      // Savings goal might not exist, which is okay
      result.clearedItems.savingsGoal = false;
    }

    // 6. Clear LocalStorage
    try {
      clearLocalStorageData();
      result.clearedItems.localStorage = true;
    } catch (error) {
      result.errors.push(`Failed to clear local storage: ${error.message}`);
    }

    result.success = result.errors.length === 0;
    return result;

  } catch (error) {
    result.errors.push(`General error: ${error.message}`);
    return result;
  }
};

export const clearLocalStorageData = () => {
  // Clear all app-related localStorage keys
  const keysToRemove = [
    'quickFinancialProfile',
    'financialProfile',
    'purchaseHistory',
    'chatHistory',
    'proModeAnalyses',
    'savingsGoals',
    'userLocationData'
  ];

  keysToRemove.forEach(key => {
    localStorage.removeItem(key);
  });

  // Clear any cached data
  sessionStorage.clear();
};
Step 2: Add Clear Data Method to useFirestore Hook
File: src/hooks/useFirestore.ts
Add this import at the top:
typescriptimport { clearAllUserData, clearLocalStorageData } from '@/lib/firestore/clearDataService';
Add this to the return object (around line 390):
typescriptreturn {
  // ... existing properties
  clearAllData: async () => {
    if (!user) {
      // Just clear localStorage for non-authenticated users
      clearLocalStorageData();
      return { success: true, clearedItems: { localStorage: true } };
    }
    return await clearAllUserData(user.uid);
  }
};
Step 3: Create the Clear Data Button Component
Create a new file: src/components/ClearDataButton.tsx
tsximport React, { useState } from 'react';
import { useFirestore } from '@/hooks/useFirestore';
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import '../styles/ClearDataButton.css';

export const ClearDataButton: React.FC = () => {
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [isClearing, setIsClearing] = useState(false);
  const [clearResult, setClearResult] = useState<any>(null);
  const [confirmText, setConfirmText] = useState('');
  
  const { clearAllData } = useFirestore();
  const { user } = useAuth();
  const navigate = useNavigate();

  const handleClearClick = () => {
    setShowConfirmDialog(true);
    setConfirmText('');
    setClearResult(null);
  };

  const handleConfirmClear = async () => {
    if (confirmText !== 'DELETE ALL') {
      alert('Please type "DELETE ALL" to confirm');
      return;
    }

    setIsClearing(true);
    
    try {
      const result = await clearAllData();
      setClearResult(result);
      
      if (result.success) {
        setTimeout(() => {
          // Redirect to home and reload to ensure fresh state
          navigate('/');
          window.location.reload();
        }, 2000);
      }
    } catch (error) {
      setClearResult({
        success: false,
        errors: ['An unexpected error occurred']
      });
    } finally {
      setIsClearing(false);
    }
  };

  const handleCancel = () => {
    setShowConfirmDialog(false);
    setConfirmText('');
    setClearResult(null);
  };

  return (
    <>
      <button
        onClick={handleClearClick}
        className="clear-data-button"
        aria-label="Clear all data"
      >
        <span className="button-icon">üóëÔ∏è</span>
        Clear All Data
      </button>

      {showConfirmDialog && (
        <div className="confirm-dialog-overlay">
          <div className="confirm-dialog">
            <h2>‚ö†Ô∏è Clear All Data</h2>
            
            {!clearResult ? (
              <>
                <div className="warning-message">
                  <p><strong>This action will permanently delete:</strong></p>
                  <ul>
                    <li>All purchase history and decisions</li>
                    <li>Your financial profile</li>
                    <li>Chat conversations</li>
                    <li>Pro Mode analyses</li>
                    <li>Savings goals and progress</li>
                    <li>All locally stored data</li>
                  </ul>
                  <p className="warning-text">
                    <strong>‚ö†Ô∏è This action cannot be undone!</strong>
                  </p>
                </div>

                <div className="confirm-input-group">
                  <label htmlFor="confirm-text">
                    Type <strong>DELETE ALL</strong> to confirm:
                  </label>
                  <input
                    id="confirm-text"
                    type="text"
                    value={confirmText}
                    onChange={(e) => setConfirmText(e.target.value)}
                    placeholder="DELETE ALL"
                    disabled={isClearing}
                  />
                </div>

                <div className="dialog-actions">
                  <button
                    onClick={handleConfirmClear}
                    className="btn-danger"
                    disabled={isClearing || confirmText !== 'DELETE ALL'}
                  >
                    {isClearing ? (
                      <>
                        <span className="spinner"></span>
                        Clearing Data...
                      </>
                    ) : (
                      'Delete Everything'
                    )}
                  </button>
                  <button
                    onClick={handleCancel}
                    className="btn-cancel"
                    disabled={isClearing}
                  >
                    Cancel
                  </button>
                </div>
              </>
            ) : (
              <div className="result-message">
                {clearResult.success ? (
                  <>
                    <div className="success-icon">‚úÖ</div>
                    <h3>Data Cleared Successfully</h3>
                    <p>All your data has been removed.</p>
                    <p className="redirect-message">Redirecting to home page...</p>
                  </>
                ) : (
                  <>
                    <div className="error-icon">‚ùå</div>
                    <h3>Some Errors Occurred</h3>
                    <ul className="error-list">
                      {clearResult.errors?.map((error: string, index: number) => (
                        <li key={index}>{error}</li>
                      ))}
                    </ul>
                    <button onClick={handleCancel} className="btn-primary">
                      Close
                    </button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </>
  );
};

export default ClearDataButton;
Step 4: Add Styles for the Clear Data Button
Create a new file: src/styles/ClearDataButton.css
css/* Clear Data Button Styles */
.clear-data-button {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 20px;
  background-color: #dc2626;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.clear-data-button:hover {
  background-color: #b91c1c;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
}

.clear-data-button:active {
  transform: translateY(0);
}

.button-icon {
  font-size: 16px;
}

/* Confirmation Dialog */
.confirm-dialog-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10000;
  animation: fadeIn 0.2s ease;
}

.confirm-dialog {
  background: white;
  border-radius: 16px;
  padding: 32px;
  max-width: 500px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  animation: slideUp 0.3s ease;
}

.confirm-dialog h2 {
  margin: 0 0 24px 0;
  font-size: 24px;
  color: #111827;
  text-align: center;
}

.warning-message {
  background-color: #fef2f2;
  border: 1px solid #fecaca;
  border-radius: 8px;
  padding: 16px;
  margin-bottom: 24px;
}

.warning-message p {
  margin: 0 0 12px 0;
  color: #991b1b;
}

.warning-message ul {
  margin: 0 0 12px 20px;
  color: #7f1d1d;
}

.warning-message li {
  margin: 4px 0;
}

.warning-text {
  font-size: 14px;
  text-align: center;
  color: #dc2626 !important;
  margin-top: 16px !important;
}

.confirm-input-group {
  margin-bottom: 24px;
}

.confirm-input-group label {
  display: block;
  margin-bottom: 8px;
  font-size: 14px;
  color: #374151;
}

.confirm-input-group input {
  width: 100%;
  padding: 10px 12px;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  transition: border-color 0.2s ease;
}

.confirm-input-group input:focus {
  outline: none;
  border-color: #dc2626;
}

.dialog-actions {
  display: flex;
  gap: 12px;
  justify-content: center;
}

.btn-danger {
  padding: 12px 24px;
  background-color: #dc2626;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 8px;
}

.btn-danger:hover:not(:disabled) {
  background-color: #b91c1c;
}

.btn-danger:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-cancel {
  padding: 12px 24px;
  background-color: #e5e7eb;
  color: #374151;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-cancel:hover:not(:disabled) {
  background-color: #d1d5db;
}

.btn-primary {
  padding: 12px 24px;
  background-color: #6366f1;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-primary:hover {
  background-color: #4f46e5;
}

/* Loading Spinner */
.spinner {
  display: inline-block;
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top-color: white;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Result Messages */
.result-message {
  text-align: center;
}

.success-icon, .error-icon {
  font-size: 48px;
  margin-bottom: 16px;
}

.result-message h3 {
  margin: 0 0 12px 0;
  font-size: 20px;
  color: #111827;
}

.result-message p {
  margin: 8px 0;
  color: #6b7280;
}

.redirect-message {
  font-style: italic;
  color: #6366f1 !important;
  margin-top: 16px !important;
}

.error-list {
  text-align: left;
  margin: 16px 0;
  padding: 16px;
  background-color: #fef2f2;
  border-radius: 8px;
  color: #991b1b;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Responsive Design */
@media (max-width: 480px) {
  .confirm-dialog {
    padding: 24px;
    width: 95%;
  }

  .dialog-actions {
    flex-direction: column;
  }

  .btn-danger, .btn-cancel, .btn-primary {
    width: 100%;
  }
}
Step 5: Add the Button to Your Settings/Profile Page
Option A: Add to User Profile Component
File: src/components/UserProfile.js or create a Settings page
jsximport ClearDataButton from './ClearDataButton';

// In your component's render method, add:
<div className="danger-zone">
  <h3>Danger Zone</h3>
  <p>Irreversible actions that affect your account data.</p>
  <ClearDataButton />
</div>
Option B: Add to Dashboard
File: src/components/Dashboard/Dashboard.js
Add at the bottom of the dashboard actions section (around line 330):
jsx{/* Dashboard Actions */}
<div className="dashboard-actions">
  <button 
    onClick={() => navigate('/')} 
    className="action-btn primary"
  >
    <span className="action-icon">üõí</span>
    Analyze New Purchase
  </button>
  <button 
    onClick={() => navigate('/profile')} 
    className="action-btn secondary"
  >
    <span className="action-icon">üë§</span>
    Update Profile
  </button>
</div>

{/* Danger Zone - Add this section */}
<div className="dashboard-danger-zone">
  <ClearDataButton />
</div>
Add this CSS to src/styles/Dashboard.css:
css.dashboard-danger-zone {
  display: flex;
  justify-content: center;
  margin-top: 40px;
  padding-top: 40px;
  border-top: 1px solid var(--border-light);
}
Step 6: Add Import Statement
Don't forget to import the component where you use it:
jsximport ClearDataButton from './ClearDataButton';
// or if using TypeScript
import { ClearDataButton } from './ClearDataButton';